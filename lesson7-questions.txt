Questions for Lesson 7

1. What method do you put in the top of a controller so that something happens
before some or all of the controller actions execute?  Where can you put that
change so that it affects all controllers?

before_action

2. Consider the following statement:

bin/rails generate model subscription forum:references user:references priority:integer

This creates several files, including two you need to know about.  What are they?
After you do this statement but before starting the rails server, you have to do another
command.  What is that command?

bin/rails db:migrate

3. What table is created as a result of the migration described above? What are the column
names in that table? What is the primary key? What are the foreign keys?  What does a 
foreign key do?

id (Primary Key)
forum_id (Foreign Key)
user_id (Foreign Key)
priority (Integer)
created_at (Timestamp)
updated_at (Timestamp)


The primary key of the table is the id column. This column is automatically generated by Rails and uniquely identifies each record in the subscriptions table.

The foreign keys in the subscriptions table are forum_id and user_id.

A foreign key is a field (or collection of fields) in one table that uniquely identifies a row of another table.

4. You have the following lines in the Subscription model:

belongs_to :user
belongs_to :forum

Because of this, you have several additional methods added to the Subscription class.  This means
that if you have a @subscription (an instance of Subscription), you have a couple of methods
used to refer to associated database methods.  What are those methods?  (Actually there are a few,
but there are two in particular you should know.)

the user and the forum methods

5. You have the following lines in the User model.

has_many :subscriptions
has_many :posts
has_many :forums, through: :subscriptions

What are threee important methods that are available to instances of the user model because
of these lines?

subcriptions, posts, forums

6. Suppose that user is an instance of the User class. What kind of object is returned by
user.subcriptions?  Hint: To find out, go into the Rails console for your application.
Then do:

user=User.first
subscriptions = user.subscriptions
subscriptions.class

The second call returns what looks like an empty array -- but it isn't
of the Array class. This is important, because you can do, for 
example:

new_subscription = subscriptions.new

or

new_subscription = user.subscriptions.new

Try that last line.  You will see that it creates a subscription object, but that
object is not entirely empty.  Which attribute is set? Where does it get that
value?


When you call user.subscriptions, it returns an instance of ActiveRecord::Associations::CollectionProxy. 

When you create a new subscription object using user.subscriptions.new, it automatically sets the user_id attribute of the Subscription object. 
This is because the new method on the association (subscriptions) understands the context of the User object and sets up the new Subscription with the correct foreign key value.

Here's an example to illustrate this:

ruby
Copy code
# Start the Rails console
rails console

# Get the first user
user = User.first

# Check the class of user.subscriptions
subscriptions = user.subscriptions
subscriptions.class
# => ActiveRecord::Associations::CollectionProxy

# Create a new subscription
new_subscription = user.subscriptions.new

# Check the new subscription object
new_subscription
The new_subscription object will have the user_id attribute set to the id of the user instance.


user.subscriptions returns an ActiveRecord::Associations::CollectionProxy object.
subscriptions.new or user.subscriptions.new creates a new Subscription object.
The user_id attribute of the new Subscription object is automatically set to the id of the user instance.
This automatic setting of the foreign key (user_id) ensures that the new Subscription object is correctly associated with the user without requiring manual assignment of the foreign key. 

7. Suppose that user is an instance of User, and forum is an instance of Forum.  What
Active Record Statement could you use to retrieve all the user's posts for that
forum?  Hint: You need to have a where in your statement. Try this out in the console.
You will see the SQL that is executed logged to the screen.  What is that SQL?

To retrieve all posts by a specific user in a specific forum, use the following Active Record statement:

user_posts_for_forum = Post.where(user_id: user.id, forum_id: forum.id)

This generates the SQL query:
SELECT "posts".* FROM "posts" WHERE "posts"."user_id" = user_id AND "posts"."forum_id" = forum_id;
Replace user_id and forum_id with the actual IDs of the user and forum.

8. You have the following method in your posts controller:

  def destroy
    @forum = @post.forum
    @post.destroy
    redirect_to @forum, notice: "Your post was deleted."
  end

There is a security exposure, a risk that a hacker could do damage.  What is that
risk? What two things are done in your code to prevent the risk?

Authentication: Verify that the user is logged in and authenticated. 
Only authenticated users should be able to perform actions like deleting a post.

Authorization: Ensure that the user is authorized to delete the specific post. 
This means checking that the post belongs to the current user or that the user has 
the necessary permissions to delete the post.

9. The routes for subscriptions are nested under the forum routes.  How does this
change the routes?  What is the additional hash key and value that is passed in the
params hash to the subscriptions controller as a result of this nesting? Which routes
are unaffected by the nesting?


When you nest subscription routes under forum routes:

URLs change to include the forum context, e.g., /forums/:forum_id/subscriptions.

The params hash in the SubscriptionsController now includes :forum_id, which specifies the forum to which the subscription belongs.
Routes for forums remain unchanged, e.g., /forums, /forums/:id.
For the route /forums/1/subscriptions/2, the params hash will be:

{
  forum_id: '1',
  id: '2'
}
This nesting helps in organizing the relationship between forums and their subscriptions.


10. Every action method must do exactly one of two things -- that is, each
method may do all sorts of logic, but at the end, it has to do one of two
things, depending on the outcome of the logic.  What are those two things?

render a view 
render an action

